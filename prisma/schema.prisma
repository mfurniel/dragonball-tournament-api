// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(50)
  creator   String   @db.VarChar(50)
  location  String   @db.VarChar(50)
  prize     String?  @db.VarChar(50)
  startDate DateTime
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  fights Fight[]
}

model Warrior {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(100)
  race       String   @db.VarChar(50)
  powerLevel Int
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(6)

  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])

  warrior1 Fight[] @relation("Warrior1")
  warrior2 Fight[] @relation("Warrior2")
  winner   Fight[] @relation("Winner")
}

model Fight {
  id           String  @id @default(uuid())
  tournamentId String
  warrior1Id   String?
  warrior2Id   String?
  winnerId     String?
  description  String? @db.VarChar(255)

  creator   String?     @db.VarChar(50)
  startTime DateTime?
  endTime   DateTime?
  status    FightStatus @default(PENDING)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  warrior1   Warrior?   @relation("Warrior1", fields: [warrior1Id], references: [id])
  warrior2   Warrior?   @relation("Warrior2", fields: [warrior2Id], references: [id])
  winner     Warrior?   @relation("Winner", fields: [winnerId], references: [id])
}

enum FightStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

model User {
  id        String  @id @default(uuid())
  username  String   @unique @db.VarChar(50)
  password  String
  role      UserRole @default(USER)
  isActive  Boolean @default(true)
  warrior     Warrior?  // Relaci√≥n inversa

  lastLoginAt DateTime
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  MODERATOR
}